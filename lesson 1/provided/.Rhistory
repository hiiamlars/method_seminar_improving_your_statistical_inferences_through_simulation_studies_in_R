simulated_scores <- data_frame(score = c(rnorm(n = n_per_group, mean = m1, sd = sd1),
rnorm(n = n_per_group, mean = m2, sd = sd2)),
condition = c(rep("Control", n_per_group),
rep("Intervention", n_per_group)))
# plot
p <-
ggplot(data.frame(simulated_scores), aes(score)) +
geom_histogram(binwidth = 1, boundary = -0.5, position = "identity", fill = "darkcyan") +
scale_x_continuous(breaks = breaks_pretty(),
name = "Depression score (BDI-II)") +
scale_fill_viridis_d(begin = 0.3, end = 0.7, option = "G") +
ylab("Count") +
theme_linedraw() +
theme(panel.grid.minor = element_blank(),
text = element_text(family = "Courier New")) +
facet_wrap(~ condition, ncol = 1)
return(p)
}
rct_simulation_plot(n_per_group = 40, m1 = 33, m2 = 29, sd1 = 10, sd2 = 12)
rct_simulation_plot(n_per_group = 1000000, m1 = 33, m2 = 29, sd1 = 10, sd2 = 12)
runif(n = 1,
min = 1,
max = 10) |>
round_half_up(0)
set.seed(43) # set the starting seed value for generating the random numbers
runif(n = 1,
min = 1,
max = 10) |>
round_half_up(0)
set.seed(43) # set it again to the same value starting seed value for generating the random numbers
runif(n = 1,
min = 1,
max = 10) |>
round_half_up(0)
set.seed(43) # set the starting seed value for generating the random numbers
runif(n = 1,
min = 1,
max = 10) |>
round_half_up(0)
runif(n = 1,
min = 1,
max = 10) |>
round_half_up(0)
set.seed(43) # set the starting seed value for generating the random numbers
# generate both of the above numbers in one function call
runif(n = 2, # generate two numbers rather than one
min = 1,
max = 10) |>
round_half_up(0)
rnorm(n = 100,
mean = 7.52,
sd = 3.18)
simulated_scores <- rnorm(n = 1000000, # note that we need lots and lots of data to get a precise estimate
mean = 7.52,
sd = 3.18)
mean(simulated_scores) |> round_half_up(2)
sd(simulated_scores) |> round_half_up(2)
simulated_scores <-
rnorm(n = 1000000, # sample n
mean = 0, # population mean (μ or mu)
sd = 1) # population sd (σ or sigma)
dat <- data.frame(simulated_scores = simulated_scores)
ggplot(dat, aes(x = simulated_scores)) +
geom_histogram()
rnorm_histogram(n = 1000000,
mean = 0,
sd = 1)
rnorm_histogram(n = 1000000,
mean = 0,
sd = 1)
rnorm_histogram(n = 1000000,
mean = -2,
sd = 1,
fill = "darkcyan")
rnorm_histogram(n = 1000000,
mean = 0,
sd = 1)
rnorm_histogram(n = 1000000,
mean = 0,
sd = 2,
fill = "darkcyan")
rnorm_histogram(n = 1000000,
mean = 0,
sd = 1)
rnorm_histogram(n = 1000000,
mean = -2,
sd = 2,
fill = "darkcyan")
rnorm_histogram(n = 1000000,
mean = 0,
sd = 1)
rnorm_histogram(n = 1000,
mean = 0,
sd = 1,
fill = "darkcyan")
rnorm_histogram(n = 100,
mean = 0,
sd = 1,
fill = "darkorange")
set.seed(238)
rnorm_histogram(n = 50,
mean = 0,
sd = 1,
fill = "darkgreen")
rnorm_histogram(n = 50,
mean = 0,
sd = 1,
fill = "darkblue")
rnorm_histogram(n = 50,
mean = 0,
sd = 1,
fill = "darkred")
rnorm_histogram(n = 50,
mean = 0,
sd = 1,
fill = "darkgreen")
rnorm_histogram(n = 50,
mean = 0,
sd = 1,
fill = "darkblue")
rnorm_histogram(n = 50,
mean = 0,
sd = 1,
fill = "darkblue")
rnorm_histogram(n = 50,
mean = 0,
sd = 1,
fill = "darkred")
values <- c(4, 2, 6, 2, NA, 4, 3, 1, NA, 7, 5)
mean(values) # returns NA
mean(values, na.rm = TRUE) # returns the mean after dropping NA
# tired of writing 'na.rm = TRUE' repeatedly? write your own function to do it automatically
mean_na_rm <- function(x){
mean(x, na.rm = TRUE)
}
mean_na_rm(values) # returns the mean after dropping NA
mean_of_values <- mean_na_rm(values)
round(mean_of_values, digits = 2)
# write a function to always round to two decimal places
round_2 <- function(x){
round(x, digits = 2)
}
round_2(mean_of_values)
round(0.5)
round(1.5)
round(2.5)
round(3.5)
round(4.5)
round(5.5)
library(janitor)
round_half_up(0.5)
round_half_up(1.5)
round_half_up(2.5)
round_half_up(3.5)
round_half_up(4.5)
round_half_up(5.5)
# use this data to build and test your function
data_simulated_intervention <-
tibble(condition = "intervention",
score = rnorm(n = 50, mean = 0, sd = 1))
data_simulated_control <-
tibble(condition = "control",
score = rnorm(n = 50, mean = 0, sd = 1))
data_simulated <-
bind_rows(data_simulated_intervention,
data_simulated_control)
View(data_simulated)
# define function
t_test_p_value <- function(data) {
res <- t.test(formula = score ~ condition,
data = data)
return(res$p.value)
}
# call function
t_test_p_value(data_simulated)
mean(data_simulated$score)
res <- mean(data_simulated$score,
na.rm = TRUE)
res <- mean(data_simulated$score,
na.rm = TRUE)
return(res)
res <- mean(data_simulated$score,
na.rm = TRUE)
res
mean_drop_na <- function(x) {
res <- mean(x,
na.rm = TRUE)
res
}
mean_drop_na(data_simulated$score)
mean_drop_na <- function(x) {
res <- mean(x,
na.rm = TRUE)
return(res)
}
mean_drop_na(data_simulated$score)
sd_drop_na <- function(x) {
res <- sd(x,
na.rm = TRUE)
return(res)
}
sd_drop_na(data_simulated$score)
res <- data_simluated$score |>
group_by() |>
mean(data_simluated$score,
na.rm = TRUE)
res <- data_simulated$score |>
group_by() |>
mean(data_simluated$score,
na.rm = TRUE)
mean_drop_na <- function(x) {
res <- mean(x$score,
na.rm = TRUE)
return(res)
}
mean_drop_na(data_simulated)
sd_drop_na <- function(x) {
res <- sd(x$score,
na.rm = TRUE)
return(res)
}
sd_drop_na(data_simulated)
res <- data_simulated$score |>
dplyr::group_by() |>
mean(data_simluated$score,
na.rm = TRUE)
res <- data_simulated |>
dplyr::filter(condition == "intervention") |>
mean(data_simluated$score,
na.rm = TRUE)
res <- data_simulated |>
dplyr::filter(condition == "intervention") |>
mean(score,
na.rm = TRUE)
res
data_simluated_con <- data_simulated |>
dplyr::filter(condition == "intervention")
mean(data_simulated_con$score,
na.rm = TRUE)
View(data_simluated_con)
data_simluated_con$score
mean(data_simulated_con$score,
na.rm = TRUE)
data_simluated_con <- data_simulated |>
dplyr::filter(condition == "intervention")
data_simulated_con$score
data_simluated_con
data_simluated_con$score
mean(data_simulated_con$score,
na.rm = TRUE)
data_simulated_con <- data_simulated |>
dplyr::filter(condition == "intervention")
data_simulated_con$score
mean(data_simulated_con$score,
na.rm = TRUE)
res
data_simulated_con$score
mean(data_simulated_con$score,
na.rm = TRUE)
res <- mean(data_simulated_con$score,
na.rm = TRUE)
res
View(data_simulated)
data_simulated_con <- data_simulated |>
dplyr::filter(condition == "intervention")
res2 <- mean(data_simulated_con$score,
na.rm = TRUE)
res2
data_simulated_con <- data_simulated |>
dplyr::filter(condition == "control")
res
data_simulated_con <- data_simulated |>
dplyr::filter(condition == "control")
View(dat)
data_simulated_con <- data_simulated |>
dplyr::filter(condition == "control")
data_simulated_con <- data_simulated |>
dplyr::filter(condition == "intervention")
res == res
res <- data_simulated |>
dplyr::group_by(condition) |>
summarize(mean = mean(score, na.rm = TRUE))
View(res)
rm(data_simulated_con)
rm(res2)
res <- data_simulated |>
dplyr::group_by(condition) |>
summarize(mean = mean(score, na.rm = TRUE))
res
return(res)
mean_drop_na_con <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE))
return(res)
}
mean_drop_na_con(data_simulated)
sd_drop_na <- function(x) {
res <- x |>
dplyr::summarize(sd = sd(score, na.rm = TRUE))
return(res)
}
sd_drop_na(data_simulated)
mean_drop_na <- function(x) {
res <- x |>
dplyr::summarize(mean = mean(score, na.rm = TRUE))
return(res)
}
mean_drop_na(data_simulated)
sd_drop_na <- function(x) {
res <- x |>
dplyr::summarize(sd = sd(score, na.rm = TRUE))
return(res)
}
sd_drop_na(data_simulated)
mean_drop_na_con <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE))
return(res)
}
mean_drop_na_con(data_simulated)
mean_sd_drop_na_con <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
return(res)
}
mean_sd_drop_na_con(data_simulated)
View(data_simluated_con)
cohens_d <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
sd_pooled <- sqrt((nrow(data_simulated_intervention -1) * res[2, 2] + (nrow(data_simulated_control -1) * res[2,1])) / (nrow(data_simulated_intervention) + nrow(data_simulated_control) -2))
return(sd_pooled)
}
cohens_d(data_simulated)
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
res <- data_simulated |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
sd_pooled <- sqrt((nrow(data_simulated_intervention -1) * res[2, 2] + (nrow(data_simulated_control -1) * res[2,1])) / (nrow(data_simulated_intervention) + nrow(data_simulated_control) -2))
sd_pooled <- sqrt(((50-1) * res[2,1] + (50-1) * res[2,2])/ (50+50-2))
res <- data_simulated |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
res
print(res)
sd_pooled <- sqrt(((50-1) * res$mean[1] + (50-1) * res$mean[2]) / (50+50-2))
return(sd_pooled)
cohens_d <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
print(res)
sd_pooled <- sqrt(((50-1) * res$mean[1] + (50-1) * res$mean[2]) / (50+50-2))
return(sd_pooled)
}
cohens_d(data_simulated)
# set default chunk options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
# dependencies
library(dplyr)
library(tibble)
library(forcats)
library(report)
values <- c(4, 2, 6, 2, NA, 4, 3, 1, NA, 7, 5)
mean(values) # returns NA
mean(values, na.rm = TRUE) # returns the mean after dropping NA
# tired of writing 'na.rm = TRUE' repeatedly? write your own function to do it automatically
mean_na_rm <- function(x){
mean(x, na.rm = TRUE)
}
mean_na_rm(values) # returns the mean after dropping NA
mean_of_values <- mean_na_rm(values)
round(mean_of_values, digits = 2)
# write a function to always round to two decimal places
round_2 <- function(x){
round(x, digits = 2)
}
round_2(mean_of_values)
round(0.5)
round(1.5)
round(2.5)
round(3.5)
round(4.5)
round(5.5)
library(janitor)
round_half_up(0.5)
round_half_up(1.5)
round_half_up(2.5)
round_half_up(3.5)
round_half_up(4.5)
round_half_up(5.5)
# use this data to build and test your function
data_simulated_intervention <-
tibble(condition = "intervention",
score = rnorm(n = 50, mean = 0, sd = 1))
data_simulated_control <-
tibble(condition = "control",
score = rnorm(n = 50, mean = 0, sd = 1))
data_simulated <-
bind_rows(data_simulated_intervention,
data_simulated_control)
# define function
t_test_p_value <- function(data) {
res <- t.test(formula = score ~ condition,
data = data)
return(res$p.value)
}
# call function
t_test_p_value(data_simulated)
mean_drop_na <- function(x) {
res <- x |>
dplyr::summarize(mean = mean(score, na.rm = TRUE))
return(res)
}
mean_drop_na(data_simulated)
sd_drop_na <- function(x) {
res <- x |>
dplyr::summarize(sd = sd(score, na.rm = TRUE))
return(res)
}
sd_drop_na(data_simulated)
mean_drop_na_con <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE))
return(res)
}
mean_drop_na_con(data_simulated)
mean_sd_drop_na_con <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
return(res)
}
mean_sd_drop_na_con(data_simulated)
cohens_d <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
print(res)
sd_pooled <- sqrt(((50-1) * res$mean[1] + (50-1) * res$mean[2]) / (50+50-2))
return(sd_pooled)
}
cohens_d(data_simulated)
res <- data_simulated |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
print(res)
sd_pooled <- sqrt(((50-1) * res$mean[1] + (50-1) * res$mean[2]) / (50+50-2))
print(res)
cohens_d <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
print(res)
sd_pooled <- sqrt(((50-1) * res$mean[1] + (50-1) * res$mean[2]) / (50+50-2))
return(sd_pooled)
}
cohens_d(data_simulated)
# use this data to build and test your function
data_simulated_intervention <-
tibble(condition = "intervention",
score = rnorm(n = 50, mean = 0, sd = 1))
data_simulated_control <-
tibble(condition = "control",
score = rnorm(n = 50, mean = 0, sd = 1))
data_simulated <-
bind_rows(data_simulated_intervention,
data_simulated_control)
mean_drop_na <- function(x) {
res <- x |>
dplyr::summarize(mean = mean(score, na.rm = TRUE))
return(res)
}
mean_drop_na(data_simulated)
sd_drop_na <- function(x) {
res <- x |>
dplyr::summarize(sd = sd(score, na.rm = TRUE))
return(res)
}
sd_drop_na(data_simulated)
mean_drop_na_con <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE))
return(res)
}
mean_drop_na_con(data_simulated)
mean_sd_drop_na_con <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
return(res)
}
mean_sd_drop_na_con(data_simulated)
cohens_d <- function(x) {
res <- x |>
dplyr::group_by(condition) |>
dplyr::summarize(mean = mean(score, na.rm = TRUE), sd = sd(score, na.rm = TRUE))
sd_pooled <- sqrt(((50-1) * res$mean[1] + (50-1) * res$mean[2]) / (50+50-2))
return(sd_pooled)
}
cohens_d(data_simulated)
